
# This file contains keyboard layouts for administrator interactions in the Telegram bot

from aiogram.utils.keyboard import InlineKeyboardBuilder

def get_admin_keyboard():
    """Generate the main admin panel keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", 
        callback_data="admin_services"
    )
    keyboard.button(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏", 
        callback_data="admin_appointments"
    )
    keyboard.button(
        text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
        callback_data="admin_stats"
    )
    keyboard.button(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏", 
        callback_data="admin_masters"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_services_management_keyboard():
    """Generate a keyboard for service management options"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", 
        callback_data="add_service"
    )
    keyboard.button(
        text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É—Å–ª—É–≥", 
        callback_data="view_services"
    )
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
        callback_data="back_to_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_service_actions_keyboard(service_id):
    """Generate a keyboard for actions on a specific service"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É", 
        callback_data=f"edit_service_{service_id}"
    )
    keyboard.button(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", 
        callback_data=f"delete_service_{service_id}"
    )
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Å–ª—É–≥–∞–º", 
        callback_data="view_services"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_edit_service_keyboard(service_id):
    """Generate a keyboard for editing service fields"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", 
        callback_data=f"edit_service_name_{service_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", 
        callback_data=f"edit_service_description_{service_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", 
        callback_data=f"edit_service_price_{service_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
        callback_data=f"edit_service_duration_{service_id}"
    )
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Å–ª—É–≥–µ", 
        callback_data=f"admin_view_service_{service_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_all_services_keyboard(services):
    """Generate a keyboard listing all services"""
    keyboard = InlineKeyboardBuilder()
    for service in services:
        keyboard.button(
            text=f"{service['name']} - {service['price']}", 
            callback_data=f"admin_view_service_{service['id']}"
        )
    
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∞–º–∏", 
        callback_data="admin_services"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_confirm_delete_keyboard(service_id):
    """Generate confirmation keyboard for service deletion"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", 
        callback_data=f"confirm_delete_service_{service_id}"
    )
    keyboard.button(
        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", 
        callback_data=f"admin_view_service_{service_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_all_appointments_keyboard(appointments):
    """Generate a keyboard displaying all appointments"""
    keyboard = InlineKeyboardBuilder()
    
    # Format status for display
    status_map = {
        'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
        'canceled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
        'completed': '‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
        'paid': 'üí∞ –û–ø–ª–∞—á–µ–Ω–æ'
    }
    
    for appointment in appointments:
        # Ensure we're using standardized keys
        appt_id = appointment.get('id')
        date = appointment.get('date')
        time = appointment.get('time')
        status = appointment.get('status')
        
        # Format status
        status_display = status_map.get(status, status) if status else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        if appt_id and date and time:
            keyboard.button(
                text=f"ID: {appt_id} - {date} {time} - {status_display}", 
                callback_data=f"admin_view_appointment_{appt_id}"
            )
    
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
        callback_data="back_to_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_appointment_actions_keyboard(appointment_id, status):
    """Generate actions keyboard for a specific appointment"""
    keyboard = InlineKeyboardBuilder()
    
    # Show different action buttons based on status
    if status == "confirmed":
        keyboard.button(
            text="‚úì –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", 
            callback_data=f"admin_complete_appointment_{appointment_id}"
        )
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", 
            callback_data=f"admin_cancel_appointment_{appointment_id}"
        )
    elif status == "completed":
        keyboard.button(
            text="üí∞ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ", 
            callback_data=f"admin_paid_appointment_{appointment_id}"
        )
    
    # Payment method options if appointment is completed or confirmed
    if status in ["confirmed", "completed"]:
        keyboard.button(
            text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", 
            callback_data=f"admin_change_payment_{appointment_id}"
        )
    
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø–∏—Å—è–º", 
        callback_data="admin_appointments"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_payment_method_keyboard(appointment_id):
    """Generate keyboard for selecting payment method"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", 
        callback_data=f"admin_set_payment_cash_{appointment_id}"
    )
    keyboard.button(
        text="üí≥ –ö–∞—Ä—Ç–∞/–¢–µ—Ä–º–∏–Ω–∞–ª", 
        callback_data=f"admin_set_payment_card_{appointment_id}"
    )
    keyboard.button(
        text="üì≤ –ü–µ—Ä–µ–≤–æ–¥", 
        callback_data=f"admin_set_payment_transfer_{appointment_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥", 
        callback_data=f"admin_view_appointment_{appointment_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_cancel_confirmation_keyboard(appointment_id):
    """Generate confirmation keyboard for appointment cancellation"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", 
        callback_data=f"confirm_admin_cancel_{appointment_id}"
    )
    keyboard.button(
        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", 
        callback_data=f"admin_view_appointment_{appointment_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_complete_confirmation_keyboard(appointment_id):
    """Generate confirmation keyboard for marking appointment as completed"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úÖ –î–∞, –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", 
        callback_data=f"confirm_admin_complete_{appointment_id}"
    )
    keyboard.button(
        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", 
        callback_data=f"admin_view_appointment_{appointment_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_paid_confirmation_keyboard(appointment_id):
    """Generate confirmation keyboard for marking appointment as paid"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úÖ –î–∞, –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π", 
        callback_data=f"confirm_admin_paid_{appointment_id}"
    )
    keyboard.button(
        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", 
        callback_data=f"admin_view_appointment_{appointment_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_masters_management_keyboard():
    """Generate a keyboard for masters management options"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", 
        callback_data="add_master"
    )
    keyboard.button(
        text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤", 
        callback_data="view_masters"
    )
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
        callback_data="back_to_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_all_masters_keyboard(masters):
    """Generate a keyboard listing all masters"""
    keyboard = InlineKeyboardBuilder()
    for master in masters:
        keyboard.button(
            text=f"{master['name']}", 
            callback_data=f"admin_view_master_{master['id']}"
        )
    
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–∞—Å—Ç–µ—Ä–∞–º–∏", 
        callback_data="admin_masters"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_master_actions_keyboard(master_id):
    """Generate a keyboard for actions on a specific master"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", 
        callback_data=f"edit_master_{master_id}"
    )
    keyboard.button(
        text="üìÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", 
        callback_data=f"edit_master_schedule_{master_id}"
    )
    keyboard.button(
        text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
        callback_data=f"edit_master_notifications_{master_id}"
    )
    keyboard.button(
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞", 
        callback_data=f"master_stats_{master_id}"
    )
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä–∞–º", 
        callback_data="view_masters"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_edit_master_keyboard(master_id):
    """Generate a keyboard for editing master fields"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", 
        callback_data=f"edit_master_name_{master_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Telegram", 
        callback_data=f"edit_master_telegram_{master_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", 
        callback_data=f"edit_master_address_{master_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", 
        callback_data=f"edit_master_location_{master_id}"
    )
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É", 
        callback_data=f"admin_view_master_{master_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_schedule_days_keyboard(master_id):
    """Generate a keyboard for selecting days to edit in schedule"""
    keyboard = InlineKeyboardBuilder()
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    for day in days:
        keyboard.button(
            text=day, 
            callback_data=f"edit_day_{master_id}_{day}"
        )
    
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É", 
        callback_data=f"admin_view_master_{master_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_day_schedule_keyboard(master_id, day, current_settings):
    """Generate a keyboard for editing schedule for a specific day"""
    keyboard = InlineKeyboardBuilder()
    
    # Enable/disable day
    is_enabled = current_settings.get('enabled', True)
    status_text = "‚úÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å" if is_enabled else "‚ùå –í—ã—Ö–æ–¥–Ω–æ–π"
    toggle_text = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã—Ö–æ–¥–Ω–æ–π" if is_enabled else "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–∞–±–æ—á–∏–π"
    
    keyboard.button(
        text=f"–°—Ç–∞—Ç—É—Å: {status_text}", 
        callback_data=f"view_day_status_{master_id}_{day}"
    )
    keyboard.button(
        text=toggle_text, 
        callback_data=f"toggle_day_{master_id}_{day}"
    )
    
    # Only show time settings if day is enabled
    if is_enabled:
        start_time = current_settings.get('start', '09:00')
        end_time = current_settings.get('end', '18:00')
        
        keyboard.button(
            text=f"–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: {start_time}", 
            callback_data=f"edit_start_time_{master_id}_{day}"
        )
        keyboard.button(
            text=f"–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã: {end_time}", 
            callback_data=f"edit_end_time_{master_id}_{day}"
        )
    
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", 
        callback_data=f"edit_master_schedule_{master_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_notifications_keyboard(master_id, notifications_enabled):
    """Generate a keyboard for notification settings"""
    keyboard = InlineKeyboardBuilder()
    
    status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
    toggle_text = "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notifications_enabled else "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    keyboard.button(
        text=f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {status_text}", 
        callback_data=f"view_notifications_{master_id}"
    )
    keyboard.button(
        text=toggle_text, 
        callback_data=f"toggle_notifications_{master_id}"
    )
    
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É", 
        callback_data=f"admin_view_master_{master_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_stats_period_keyboard(date_filter=None, master_id=None):
    """Generate a keyboard for selecting statistics period"""
    keyboard = InlineKeyboardBuilder()
    
    # Determine the base callback data
    base_data = ""
    if master_id:
        base_data = f"_{master_id}"
    
    # Current filter indication
    if date_filter:
        keyboard.button(
            text=f"–¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä: {date_filter}", 
            callback_data=f"current_filter{base_data}"
        )
    
    # Period options
    keyboard.button(
        text="–°–µ–≥–æ–¥–Ω—è", 
        callback_data=f"stats_today{base_data}"
    )
    keyboard.button(
        text="–í—á–µ—Ä–∞", 
        callback_data=f"stats_yesterday{base_data}"
    )
    keyboard.button(
        text="–ù–µ–¥–µ–ª—è", 
        callback_data=f"stats_week{base_data}"
    )
    keyboard.button(
        text="–ú–µ—Å—è—Ü", 
        callback_data=f"stats_month{base_data}"
    )
    keyboard.button(
        text="–í—Å–µ –≤—Ä–µ–º—è", 
        callback_data=f"stats_all{base_data}"
    )
    
    # Back button - different based on context
    if master_id:
        keyboard.button(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É", 
            callback_data=f"admin_view_master_{master_id}"
        )
    else:
        keyboard.button(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
            callback_data="back_to_admin"
        )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_back_to_admin_keyboard():
    """Generate a keyboard to go back to admin panel"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
        callback_data="back_to_admin"
    )
    
    return keyboard.as_markup()
