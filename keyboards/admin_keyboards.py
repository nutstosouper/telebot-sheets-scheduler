
# This file contains keyboard layouts for admin interactions in the Telegram bot

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

def get_admin_keyboard():
    """Generate the main admin keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏",
        callback_data="admin_services"
    )
    keyboard.button(
        text="üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏",
        callback_data="admin_masters"
    )
    keyboard.button(
        text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏",
        callback_data="admin_appointments"
    )
    keyboard.button(
        text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏",
        callback_data="admin_offers"
    )
    keyboard.button(
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        callback_data="admin_statistics"
    )
    keyboard.button(
        text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        callback_data="admin_categories"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_services_management_keyboard():
    """Generate services management keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É",
        callback_data="add_service"
    )
    keyboard.button(
        text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏",
        callback_data="view_services"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        callback_data="back_to_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_offers_management_keyboard():
    """Generate special offers management keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        callback_data="add_offer"
    )
    keyboard.button(
        text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        callback_data="view_offers"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        callback_data="back_to_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_categories_management_keyboard():
    """Generate categories management keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        callback_data="add_category"
    )
    keyboard.button(
        text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        callback_data="view_categories"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        callback_data="back_to_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_all_services_keyboard(services):
    """Generate a keyboard with all services"""
    keyboard = InlineKeyboardBuilder()
    for service in services:
        keyboard.button(
            text=f"{service['name']} - {service['price']}",
            callback_data=f"admin_view_service_{service['id']}"
        )
    
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_services"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_all_offers_keyboard(offers):
    """Generate a keyboard with all special offers"""
    keyboard = InlineKeyboardBuilder()
    for offer in offers:
        keyboard.button(
            text=f"{offer['name']} - {offer['price']}",
            callback_data=f"admin_view_offer_{offer['id']}"
        )
    
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_offers"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_all_categories_keyboard(categories):
    """Generate a keyboard with all categories"""
    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.button(
            text=f"{category['name']}",
            callback_data=f"admin_view_category_{category['id']}"
        )
    
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_categories"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_service_actions_keyboard(service_id):
    """Generate actions keyboard for a service"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=f"edit_service_{service_id}"
    )
    keyboard.button(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_service_confirm_{service_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥",
        callback_data="view_services"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_offer_actions_keyboard(offer_id):
    """Generate actions keyboard for a special offer"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=f"edit_offer_{offer_id}"
    )
    keyboard.button(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_offer_confirm_{offer_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
        callback_data="view_offers"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_category_actions_keyboard(category_id):
    """Generate actions keyboard for a category"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=f"edit_category_{category_id}"
    )
    keyboard.button(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_category_confirm_{category_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        callback_data="view_categories"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_edit_service_keyboard(service_id):
    """Generate edit options keyboard for a service"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ",
        callback_data=f"edit_service_name_{service_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ",
        callback_data=f"edit_service_description_{service_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –¶–µ–Ω–∞",
        callback_data=f"edit_service_price_{service_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        callback_data=f"edit_service_duration_{service_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        callback_data=f"edit_service_category_{service_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"admin_view_service_{service_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_edit_offer_keyboard(offer_id):
    """Generate edit options keyboard for an offer"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ",
        callback_data=f"edit_offer_name_{offer_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ",
        callback_data=f"edit_offer_description_{offer_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –¶–µ–Ω–∞",
        callback_data=f"edit_offer_price_{offer_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        callback_data=f"edit_offer_duration_{offer_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"admin_view_offer_{offer_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_edit_category_keyboard(category_id):
    """Generate edit options keyboard for a category"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ",
        callback_data=f"edit_category_name_{category_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"admin_view_category_{category_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_confirm_delete_keyboard(item_id, item_type="service"):
    """Generate confirmation keyboard for deletion"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        callback_data=f"confirm_delete_{item_type}_{item_id}"
    )
    keyboard.button(
        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
        callback_data=f"admin_view_{item_type}_{item_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_masters_management_keyboard():
    """Generate masters management keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞",
        callback_data="add_master"
    )
    keyboard.button(
        text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤",
        callback_data="view_masters_admin"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        callback_data="back_to_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_all_masters_keyboard(masters):
    """Generate a keyboard with all masters"""
    keyboard = InlineKeyboardBuilder()
    for master in masters:
        keyboard.button(
            text=f"{master['name']}",
            callback_data=f"admin_view_master_{master['id']}"
        )
    
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_masters"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_master_actions_keyboard(master_id):
    """Generate actions keyboard for a master"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=f"edit_master_{master_id}"
    )
    keyboard.button(
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        callback_data=f"master_statistics_{master_id}"
    )
    keyboard.button(
        text="üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏",
        callback_data=f"master_notifications_{master_id}"
    )
    keyboard.button(
        text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º",
        callback_data=f"master_schedule_{master_id}"
    )
    keyboard.button(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_master_confirm_{master_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤",
        callback_data="view_masters_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_edit_master_keyboard(master_id):
    """Generate edit options keyboard for a master"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úèÔ∏è –ò–º—è",
        callback_data=f"edit_master_name_{master_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è Telegram",
        callback_data=f"edit_master_telegram_{master_id}"
    )
    keyboard.button(
        text="‚úèÔ∏è –ê–¥—Ä–µ—Å",
        callback_data=f"edit_master_address_{master_id}"
    )
    keyboard.button(
        text="üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è",
        callback_data=f"edit_master_location_{master_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"admin_view_master_{master_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_master_notification_keyboard(master):
    """Generate notification settings keyboard for a master"""
    status = "–í—ã–∫–ª—é—á–∏—Ç—å" if master.get('notification_enabled', True) else "–í–∫–ª—é—á–∏—Ç—å"
    callback = "disable" if master.get('notification_enabled', True) else "enable"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text=f"üîî {status} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        callback_data=f"{callback}_notifications_{master['id']}"
    )
    keyboard.button(
        text="‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        callback_data=f"configure_reminders_{master['id']}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"admin_view_master_{master['id']}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_reminder_settings_keyboard(master_id):
    """Generate reminder settings keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚è∞ 1 —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏",
        callback_data=f"toggle_reminder_1h_{master_id}"
    )
    keyboard.button(
        text="‚è∞ 2 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏",
        callback_data=f"toggle_reminder_2h_{master_id}"
    )
    keyboard.button(
        text="‚è∞ 1 –¥–µ–Ω—å –¥–æ –∑–∞–ø–∏—Å–∏",
        callback_data=f"toggle_reminder_1d_{master_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"master_notifications_{master_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_master_schedule_keyboard(master_id):
    """Generate schedule management keyboard for a master"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
        callback_data=f"set_working_hours_{master_id}"
    )
    keyboard.button(
        text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å",
        callback_data=f"add_day_off_{master_id}"
    )
    keyboard.button(
        text="üìÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–º–∏",
        callback_data=f"manage_days_off_{master_id}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"admin_view_master_{master_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_all_appointments_keyboard(appointments):
    """Generate a keyboard with all appointments grouped by date"""
    keyboard = InlineKeyboardBuilder()
    
    # Group appointments by date
    appointments_by_date = {}
    for appointment in appointments:
        date = appointment.get('date')
        if date not in appointments_by_date:
            appointments_by_date[date] = []
        appointments_by_date[date].append(appointment)
    
    # Sort dates
    sorted_dates = sorted(appointments_by_date.keys())
    
    # Add date buttons
    for date in sorted_dates:
        count = len(appointments_by_date[date])
        keyboard.button(
            text=f"üìÖ {date} ({count} –∑–∞–ø–∏—Å–µ–π)",
            callback_data=f"admin_appointments_date_{date}"
        )
    
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        callback_data="back_to_admin"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_date_appointments_admin_keyboard(appointments, date):
    """Generate a keyboard with appointments for a specific date"""
    keyboard = InlineKeyboardBuilder()
    
    for appointment in appointments:
        status_text = {
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
            'canceled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
            'completed': '‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'paid': 'üí∞ –û–ø–ª–∞—á–µ–Ω–æ',
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        }.get(appointment.get('status'), appointment.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        
        # Get time and client info
        time = appointment.get('time', '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏')
        user_id = appointment.get('user_id', '–ù–µ—Ç ID')
        
        keyboard.button(
            text=f"{time} - {status_text} (–ö–ª–∏–µ–Ω—Ç: {user_id})",
            callback_data=f"admin_view_appointment_{appointment.get('id')}"
        )
    
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–∞—Ç",
        callback_data="admin_appointments"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_appointment_actions_keyboard(appointment_id, status):
    """Generate actions keyboard for an appointment"""
    keyboard = InlineKeyboardBuilder()
    
    # Add status change buttons based on current status
    if status != 'canceled':
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=f"admin_cancel_appointment_{appointment_id}"
        )
    
    if status != 'completed' and status != 'canceled':
        keyboard.button(
            text="‚úì –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é",
            callback_data=f"mark_completed_{appointment_id}"
        )
    
    if status == 'completed' and status != 'paid':
        keyboard.button(
            text="üí∞ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é",
            callback_data=f"mark_paid_{appointment_id}"
        )
    
    if status == 'pending':
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=f"admin_confirm_appointment_{appointment_id}"
        )
    
    # Set payment method buttons
    if status != 'canceled' and status != 'paid':
        keyboard.button(
            text="üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏",
            callback_data=f"set_payment_cash_{appointment_id}"
        )
        keyboard.button(
            text="üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π",
            callback_data=f"set_payment_card_{appointment_id}"
        )
        keyboard.button(
            text="üì± –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º",
            callback_data=f"set_payment_transfer_{appointment_id}"
        )
    
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π",
        callback_data="admin_appointments"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_cancel_confirmation_keyboard(appointment_id):
    """Generate confirmation keyboard for appointment cancellation"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
        callback_data=f"confirm_cancel_{appointment_id}"
    )
    keyboard.button(
        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
        callback_data=f"admin_view_appointment_{appointment_id}"
    )
    
    keyboard.adjust(1)  # One button per row
    return keyboard.as_markup()

def get_back_to_admin_keyboard():
    """Generate a keyboard to go back to admin panel"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        callback_data="back_to_admin"
    )
    return keyboard.as_markup()
