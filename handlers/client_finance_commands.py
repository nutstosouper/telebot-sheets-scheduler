
from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import datetime
import logging
import re
from utils.db_api import finance_commands, service_commands, user_commands, appointment_commands
from keyboards import finance_keyboards

router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
class FinanceStates(StatesGroup):
    setup_materials = State()
    setup_rent = State()
    setup_salary = State()
    setup_other = State()
    
    edit_material_cost = State()
    edit_time_cost = State()
    edit_other_cost = State()
    
    add_client_note = State()
    
    enter_custom_start_date = State()
    enter_custom_end_date = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "finance_menu")
async def show_finance_menu(callback: types.CallbackQuery):
    """Show finance main menu"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ admin)
    user = await user_commands.get_user(callback.from_user.id)
    if not user or user.get("role", "") != "admin":
        await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    keyboard = await finance_keyboards.get_finance_main_menu()
    await callback.message.edit_text(
        "üìä *–§–∏–Ω–∞–Ω—Å—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. "
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å "
        "–ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_finance")
async def back_to_finance(callback: types.CallbackQuery):
    """Return to finance menu"""
    await show_finance_menu(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –¥–æ—Ö–æ–¥–æ–≤ –∏ –ø—Ä–∏–±—ã–ª–∏
@router.callback_query(F.data == "finance_income")
async def show_finance_income(callback: types.CallbackQuery):
    """Show finance income menu"""
    keyboard = await finance_keyboards.get_finance_period_menu()
    await callback.message.edit_text(
        "üìä *–î–æ—Ö–æ–¥ –∏ –ø—Ä–∏–±—ã–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ –ø—Ä–∏–±—ã–ª–∏:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
@router.callback_query(F.data.startswith("finance_period_"))
async def handle_finance_period(callback: types.CallbackQuery):
    """Handle finance period selection"""
    period = callback.data.replace("finance_period_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.datetime.now().date()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    if period == "today":
        start_date = today.strftime("%Y-%m-%d")
        end_date = today.strftime("%Y-%m-%d")
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "yesterday":
        yesterday = today - datetime.timedelta(days=1)
        start_date = yesterday.strftime("%Y-%m-%d")
        end_date = yesterday.strftime("%Y-%m-%d")
        period_name = "–≤—á–µ—Ä–∞"
    elif period == "week":
        # –ù–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        start_date = (today - datetime.timedelta(days=today.weekday())).strftime("%Y-%m-%d")
        end_date = today.strftime("%Y-%m-%d")
        period_name = "—Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"
    elif period == "month":
        start_date = today.replace(day=1).strftime("%Y-%m-%d")
        end_date = today.strftime("%Y-%m-%d")
        period_name = "—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
    elif period == "30days":
        start_date = (today - datetime.timedelta(days=30)).strftime("%Y-%m-%d")
        end_date = today.strftime("%Y-%m-%d")
        period_name = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
    elif period == "custom":
        # –ó–∞–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-01-01):"
        )
        await callback.answer()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç
        state = FSMContext(callback.bot, callback.from_user.id, {"user_id": callback.from_user.id})
        await state.set_state(FinanceStates.enter_custom_start_date)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    analytics = await finance_commands.get_analytics_period(callback.from_user.id, start_date, end_date)
    
    if not analytics or len(analytics.get("daily_data", [])) == 0:
        await callback.message.edit_text(
            f"üìä *–î–æ—Ö–æ–¥ –∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ {period_name}*\n\n"
            f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ "
            f"–≤–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö.",
            reply_markup=await finance_keyboards.get_finance_period_menu(),
            parse_mode="Markdown"
        )
    else:
        message = f"üìä *–î–æ—Ö–æ–¥ –∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ {period_name}*\n\n"
        message += f"üî∏ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {analytics['total_income']} —Ä—É–±.\n"
        message += f"üî∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {analytics['total_expenses']} —Ä—É–±.\n"
        message += f"üî∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {analytics['total_profit']} —Ä—É–±.\n"
        message += f"üî∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {analytics['total_appointments']}\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –∏ –∏—Ö –±–æ–ª—å—à–µ 1, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        if len(analytics["daily_data"]) > 1:
            message += "\n*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:*\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
            sorted_days = sorted(analytics["daily_data"], key=lambda x: x["date"])
            
            for day_data in sorted_days[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                day_date = datetime.datetime.strptime(day_data["date"], "%Y-%m-%d").strftime("%d.%m.%Y")
                message += f"\n{day_date}:\n"
                message += f"- –î–æ—Ö–æ–¥: {day_data['total_income']} —Ä—É–±.\n"
                message += f"- –ü—Ä–∏–±—ã–ª—å: {day_data['profit']} —Ä—É–±.\n"
            
            # –ï—Å–ª–∏ –¥–Ω–µ–π –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(analytics["daily_data"]) > 5:
                message += f"\n... –∏ –µ—â–µ {len(analytics['daily_data']) - 5} –¥–Ω–µ–π."
        
        await callback.message.edit_text(
            message,
            reply_markup=await finance_keyboards.get_finance_period_menu(),
            parse_mode="Markdown"
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@router.message(StateFilter(FinanceStates.enter_custom_start_date))
async def process_custom_start_date(message: types.Message, state: FSMContext):
    """Process custom start date input"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if not re.match(r"^\d{4}-\d{2}-\d{2}$", message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-01-01):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    await state.update_data(start_date=message.text)
    
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-01-31):")
    await state.set_state(FinanceStates.enter_custom_end_date)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@router.message(StateFilter(FinanceStates.enter_custom_end_date))
async def process_custom_end_date(message: types.Message, state: FSMContext):
    """Process custom end date input"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if not re.match(r"^\d{4}-\d{2}-\d{2}$", message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-01-31):")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    data = await state.get_data()
    start_date = data.get("start_date")
    end_date = message.text
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    analytics = await finance_commands.get_analytics_period(message.from_user.id, start_date, end_date)
    
    if not analytics or len(analytics.get("daily_data", [])) == 0:
        await message.answer(
            f"üìä *–î–æ—Ö–æ–¥ –∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}*\n\n"
            f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ "
            f"–≤–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö.",
            reply_markup=await finance_keyboards.get_finance_period_menu(),
            parse_mode="Markdown"
        )
    else:
        message_text = f"üìä *–î–æ—Ö–æ–¥ –∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}*\n\n"
        message_text += f"üî∏ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {analytics['total_income']} —Ä—É–±.\n"
        message_text += f"üî∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {analytics['total_expenses']} —Ä—É–±.\n"
        message_text += f"üî∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {analytics['total_profit']} —Ä—É–±.\n"
        message_text += f"üî∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {analytics['total_appointments']}\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –∏ –∏—Ö –±–æ–ª—å—à–µ 1, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        if len(analytics["daily_data"]) > 1:
            message_text += "\n*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:*\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
            sorted_days = sorted(analytics["daily_data"], key=lambda x: x["date"])
            
            for day_data in sorted_days[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                day_date = datetime.datetime.strptime(day_data["date"], "%Y-%m-%d").strftime("%d.%m.%Y")
                message_text += f"\n{day_date}:\n"
                message_text += f"- –î–æ—Ö–æ–¥: {day_data['total_income']} —Ä—É–±.\n"
                message_text += f"- –ü—Ä–∏–±—ã–ª—å: {day_data['profit']} —Ä—É–±.\n"
            
            # –ï—Å–ª–∏ –¥–Ω–µ–π –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(analytics["daily_data"]) > 5:
                message_text += f"\n... –∏ –µ—â–µ {len(analytics['daily_data']) - 5} –¥–Ω–µ–π."
        
        await message.answer(
            message_text,
            reply_markup=await finance_keyboards.get_finance_period_menu(),
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —É—Å–ª—É–≥–∏"
@router.callback_query(F.data == "finance_services")
async def show_finance_services(callback: types.CallbackQuery):
    """Show finance services menu"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
    services = await service_commands.get_all_services()
    
    if not services:
        await callback.message.edit_text(
            "üìã *–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —É—Å–ª—É–≥–∏*\n\n"
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —É—Å–ª—É–≥–∏.",
            reply_markup=await finance_keyboards.get_back_to_finance_keyboard(),
            parse_mode="Markdown"
        )
    else:
        keyboard = await finance_keyboards.get_finance_services_menu(services)
        
        await callback.message.edit_text(
            "üìã *–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —É—Å–ª—É–≥–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
@router.callback_query(F.data.startswith("finance_service_"))
async def show_service_costs(callback: types.CallbackQuery):
    """Show service costs"""
    service_id = callback.data.replace("finance_service_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    service = await service_commands.get_service(service_id)
    if not service:
        await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —É—Å–ª—É–≥—É
    costs = await finance_commands.get_service_costs(service_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–±—ã–ª—å
    profit_data = await finance_commands.calculate_service_profit(service_id)
    
    message = f"üìã *{service['name']}*\n\n"
    message += f"üíµ –¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: {service['price']} —Ä—É–±.\n\n"
    
    message += f"*–†–∞—Å—Ö–æ–¥—ã:*\n"
    message += f"üîπ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {costs['materials_cost']} —Ä—É–±.\n"
    message += f"üîπ –í—Ä–µ–º—è: {costs['time_cost']} —Ä—É–±.\n"
    message += f"üîπ –î—Ä—É–≥–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {costs['other_costs']} —Ä—É–±.\n"
    
    total_cost = float(costs['materials_cost']) + float(costs['time_cost']) + float(costs['other_costs'])
    message += f"üîπ *–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_cost} —Ä—É–±.*\n\n"
    
    if profit_data:
        message += f"*–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å:*\n"
        message += f"üí∞ –ü—Ä–∏–±—ã–ª—å —Å —É—Å–ª—É–≥–∏: {profit_data['profit']} —Ä—É–±.\n"
        message += f"üìä –ú–∞—Ä–∂–∞: {profit_data['margin_percent']}%\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    keyboard = await finance_keyboards.get_finance_service_cost_menu(service_id)
    
    await callback.message.edit_text(
        message,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@router.callback_query(F.data.startswith("edit_material_cost_"))
async def edit_material_cost(callback: types.CallbackQuery, state: FSMContext):
    """Edit material cost"""
    service_id = callback.data.replace("edit_material_cost_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Å–ª—É–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(service_id=service_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    costs = await finance_commands.get_service_costs(service_id)
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏ (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {costs['materials_cost']} —Ä—É–±.):"
    )
    
    await state.set_state(FinanceStates.edit_material_cost)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(F.data.startswith("edit_time_cost_"))
async def edit_time_cost(callback: types.CallbackQuery, state: FSMContext):
    """Edit time cost"""
    service_id = callback.data.replace("edit_time_cost_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Å–ª—É–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(service_id=service_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    costs = await finance_commands.get_service_costs(service_id)
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—Å–ª—É–≥–∏ (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {costs['time_cost']} —Ä—É–±.):"
    )
    
    await state.set_state(FinanceStates.edit_time_cost)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
@router.callback_query(F.data.startswith("edit_other_cost_"))
async def edit_other_cost(callback: types.CallbackQuery, state: FSMContext):
    """Edit other costs"""
    service_id = callback.data.replace("edit_other_cost_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Å–ª—É–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(service_id=service_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    costs = await finance_commands.get_service_costs(service_id)
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —É—Å–ª—É–≥–∏ (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {costs['other_costs']} —Ä—É–±.):"
    )
    
    await state.set_state(FinanceStates.edit_other_cost)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@router.message(StateFilter(FinanceStates.edit_material_cost))
async def process_material_cost(message: types.Message, state: FSMContext):
    """Process material cost input"""
    try:
        cost = float(message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º ID —É—Å–ª—É–≥–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        service_id = data.get("service_id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        costs = await finance_commands.get_service_costs(service_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        await finance_commands.add_service_costs(
            service_id,
            cost,
            costs["time_cost"],
            costs["other_costs"]
        )
        
        await message.answer("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —É—Å–ª—É–≥—É
        callback = types.CallbackQuery(
            id="1",
            from_user=message.from_user,
            chat_instance="1",
            message=message,
            data=f"finance_service_{service_id}"
        )
        
        await show_service_costs(callback)
        
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 150.50):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
@router.message(StateFilter(FinanceStates.edit_time_cost))
async def process_time_cost(message: types.Message, state: FSMContext):
    """Process time cost input"""
    try:
        cost = float(message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º ID —É—Å–ª—É–≥–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        service_id = data.get("service_id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        costs = await finance_commands.get_service_costs(service_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        await finance_commands.add_service_costs(
            service_id,
            costs["materials_cost"],
            cost,
            costs["other_costs"]
        )
        
        await message.answer("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —É—Å–ª—É–≥—É
        callback = types.CallbackQuery(
            id="1",
            from_user=message.from_user,
            chat_instance="1",
            message=message,
            data=f"finance_service_{service_id}"
        )
        
        await show_service_costs(callback)
        
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 150.50):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
@router.message(StateFilter(FinanceStates.edit_other_cost))
async def process_other_cost(message: types.Message, state: FSMContext):
    """Process other costs input"""
    try:
        cost = float(message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º ID —É—Å–ª—É–≥–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        service_id = data.get("service_id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        costs = await finance_commands.get_service_costs(service_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        await finance_commands.add_service_costs(
            service_id,
            costs["materials_cost"],
            costs["time_cost"],
            cost
        )
        
        await message.answer("‚úÖ –î—Ä—É–≥–∏–µ —Ä–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —É—Å–ª—É–≥—É
        callback = types.CallbackQuery(
            id="1",
            from_user=message.from_user,
            chat_instance="1",
            message=message,
            data=f"finance_service_{service_id}"
        )
        
        await show_service_costs(callback)
        
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 150.50):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
@router.callback_query(F.data == "back_to_finance_services")
async def back_to_finance_services(callback: types.CallbackQuery):
    """Return to finance services menu"""
    await show_finance_services(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"
@router.callback_query(F.data == "finance_clients")
async def show_finance_clients(callback: types.CallbackQuery):
    """Show finance clients menu"""
    keyboard = await finance_keyboards.get_finance_clients_menu()
    
    await callback.message.edit_text(
        "üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
@router.callback_query(F.data == "back_to_finance_clients")
async def back_to_finance_clients(callback: types.CallbackQuery):
    """Return to finance clients menu"""
    await show_finance_clients(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é "VIP –∫–ª–∏–µ–Ω—Ç—ã"
@router.callback_query(F.data == "finance_vip_clients")
async def show_finance_vip_clients(callback: types.CallbackQuery):
    """Show VIP clients"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤
    vip_clients = await finance_commands.get_vip_clients()
    
    if not vip_clients:
        await callback.message.edit_text(
            "üëë *VIP –∫–ª–∏–µ–Ω—Ç—ã*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VIP –∫–ª–∏–µ–Ω—Ç–æ–≤. VIP-—Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞–º, "
            "–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –±–æ–ª–µ–µ 10 –≤–∏–∑–∏—Ç–æ–≤ –∏–ª–∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –±–æ–ª–µ–µ 15 000 —Ä—É–±–ª–µ–π.",
            reply_markup=await finance_keyboards.get_back_to_finance_clients_keyboard(),
            parse_mode="Markdown"
        )
    else:
        keyboard = await finance_keyboards.get_vip_clients_menu(vip_clients)
        
        message = "üëë *VIP –∫–ª–∏–µ–Ω—Ç—ã*\n\n"
        message += "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö VIP –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        
        for i, client in enumerate(vip_clients[:5], 1):
            message += f"{i}. {client['name']}\n"
            message += f"   –í–∏–∑–∏—Ç–æ–≤: {client['total_visits']}, –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {client['total_spent']} —Ä—É–±.\n\n"
        
        if len(vip_clients) > 5:
            message += f"... –∏ –µ—â–µ {len(vip_clients) - 5} –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        
        await callback.message.edit_text(
            message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ VIP –∫–ª–∏–µ–Ω—Ç–∞–º
@router.callback_query(F.data == "back_to_finance_vip")
async def back_to_finance_vip(callback: types.CallbackQuery):
    """Return to VIP clients menu"""
    await show_finance_vip_clients(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
@router.callback_query(F.data.startswith("finance_client_"))
async def show_client_stats(callback: types.CallbackQuery):
    """Show client statistics"""
    client_id = callback.data.replace("finance_client_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
    client = await user_commands.get_user(client_id)
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞
    stats = await finance_commands.get_client_stats(client_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
    appointments = await appointment_commands.get_client_appointments(client_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üë§ *{client.get('full_name', '–ö–ª–∏–µ–Ω—Ç')}*\n\n"
    
    message += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    message += f"üî∏ –í–∏–∑–∏—Ç–æ–≤: {stats['total_visits']}\n"
    message += f"üî∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']} —Ä—É–±.\n"
    message += f"üî∏ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {stats['last_visit'] if stats['last_visit'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
    message += f"üî∏ –õ—é–±–∏–º–∞—è —É—Å–ª—É–≥–∞: {stats['favorite_service'] if stats['favorite_service'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
    message += f"üî∏ VIP-—Å—Ç–∞—Ç—É—Å: {'–î–∞' if stats['vip_status'] == 'Yes' else '–ù–µ—Ç'}\n"
    
    if stats.get('notes'):
        message += f"\nüìù *–ó–∞–º–µ—Ç–∫–∏:*\n{stats['notes']}\n"
    
    message += f"\nüìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:*\n"
    
    if not appointments:
        message += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å—è—Ö\n"
    else:
        for i, appt in enumerate(sorted(appointments, key=lambda x: x["date"], reverse=True)[:3]):
            service = await service_commands.get_service(appt["service_id"])
            service_name = service["name"] if service else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"
            message += f"{i+1}. {appt['date']} - {service_name}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    keyboard = await finance_keyboards.get_client_stats_menu(client_id)
    
    await callback.message.edit_text(
        message,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
@router.callback_query(F.data.startswith("add_client_note_"))
async def add_client_note(callback: types.CallbackQuery, state: FSMContext):
    """Add client note"""
    client_id = callback.data.replace("add_client_note_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
    client = await user_commands.get_user(client_id)
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–º–µ—Ç–∫—É
    stats = await finance_commands.get_client_stats(client_id)
    current_note = stats.get("notes", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(client_id=client_id)
    
    await callback.message.edit_text(
        f"–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –æ –∫–ª–∏–µ–Ω—Ç–µ *{client.get('full_name', '–ö–ª–∏–µ–Ω—Ç')}*:\n\n"
        f"–¢–µ–∫—É—â–∞—è –∑–∞–º–µ—Ç–∫–∞: {current_note if current_note else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
        parse_mode="Markdown"
    )
    
    await state.set_state(FinanceStates.add_client_note)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
@router.message(StateFilter(FinanceStates.add_client_note))
async def process_client_note(message: types.Message, state: FSMContext):
    """Process client note input"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    client_id = data.get("client_id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
    await finance_commands.update_client_note(client_id, message.text)
    
    await message.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    callback = types.CallbackQuery(
        id="1",
        from_user=message.from_user,
        chat_instance="1",
        message=message,
        data=f"finance_client_{client_id}"
    )
    
    await show_client_stats(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
@router.callback_query(F.data.startswith("send_client_reminder_"))
async def send_client_reminder(callback: types.CallbackQuery):
    """Send reminder to client"""
    client_id = callback.data.replace("send_client_reminder_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
    client = await user_commands.get_user(client_id)
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
    keyboard = await finance_keyboards.get_reminder_menu(client_id)
    
    await callback.message.edit_text(
        f"üì± *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É*\n\n"
        f"–ö–æ–≥–¥–∞ –≤—ã —Å–≤—è–∂–µ—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º *{client.get('full_name', '–ö–ª–∏–µ–Ω—Ç')}*, "
        f"–æ—Ç–º–µ—Ç—å—Ç–µ —ç—Ç–æ –∑–¥–µ—Å—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
@router.callback_query(F.data.startswith("reminder_"))
async def handle_reminder_action(callback: types.CallbackQuery):
    """Handle reminder action"""
    action, client_id = callback.data.replace("reminder_", "").split("_")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
    client = await user_commands.get_user(client_id)
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if action == "called":
        message = f"‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –ø–æ–∑–≤–æ–Ω–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç—É {client.get('full_name', '–ö–ª–∏–µ–Ω—Ç')}."
    elif action == "messaged":
        message = f"‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—É {client.get('full_name', '–ö–ª–∏–µ–Ω—Ç')} –≤ WhatsApp."
    else:  # cancel
        message = f"‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {client.get('full_name', '–ö–ª–∏–µ–Ω—Ç')}."
    
    await callback.answer(message, show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    await show_client_stats(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"
@router.callback_query(F.data == "finance_client_activity")
async def show_client_activity(callback: types.CallbackQuery):
    """Show client activity"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö
    appointments = await appointment_commands.get_all_appointments()
    
    if not appointments:
        await callback.message.edit_text(
            "üë• *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=await finance_keyboards.get_back_to_finance_clients_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    weekday_counts = [0, 0, 0, 0, 0, 0, 0]  # –ü–Ω, –í—Ç, ..., –í—Å
    month_counts = [0] * 12  # –Ø–Ω–≤, –§–µ–≤, ..., –î–µ–∫
    
    for appt in appointments:
        try:
            date_obj = datetime.datetime.strptime(appt["date"], "%Y-%m-%d")
            weekday = date_obj.weekday()
            month = date_obj.month - 1  # –ò–Ω–¥–µ–∫—Å —Å 0
            
            weekday_counts[weekday] += 1
            month_counts[month] += 1
        except:
            pass
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –∏ –Ω–∞–∏–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    max_weekday = weekday_counts.index(max(weekday_counts))
    min_weekday = weekday_counts.index(min(weekday_counts[:5]))  # –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
    
    weekdays = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    months = ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å", "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"]
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Å—è—Ü
    max_month = month_counts.index(max(month_counts))
    
    message = "üë• *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n"
    
    message += "üìä *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:*\n"
    for i, count in enumerate(weekday_counts):
        message += f"- {weekdays[i].capitalize()}: {count} –∑–∞–ø–∏—Å–µ–π\n"
    
    message += f"\nüîù –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –¥–µ–Ω—å: *{weekdays[max_weekday].capitalize()}* ({weekday_counts[max_weekday]} –∑–∞–ø–∏—Å–µ–π)\n"
    message += f"üîª –ù–∞–∏–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å: *{weekdays[min_weekday].capitalize()}* ({weekday_counts[min_weekday]} –∑–∞–ø–∏—Å–µ–π)\n"
    
    message += f"\nüìÖ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Å—è—Ü: *{months[max_month].capitalize()}* ({month_counts[max_month]} –∑–∞–ø–∏—Å–µ–π)\n"
    
    message += "\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
    message += f"- –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–∫—Ü–∏—é –≤ {weekdays[min_weekday]} –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏\n"
    message += "- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω –≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–Ω–∏\n"
    message += "- –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∑–∞–ø–∏—Å–∏ –≤ –Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è"
    
    await callback.message.edit_text(
        message,
        reply_markup=await finance_keyboards.get_back_to_finance_clients_keyboard(),
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é "–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤"
@router.callback_query(F.data == "finance_forecast")
async def show_finance_forecast(callback: types.CallbackQuery):
    """Show finance forecast"""
    keyboard = await finance_keyboards.get_finance_forecast_menu()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    forecast_message = await finance_commands.get_daily_forecast_message(callback.from_user.id)
    
    await callback.message.edit_text(
        forecast_message,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
@router.callback_query(F.data.startswith("forecast_"))
async def handle_forecast_period(callback: types.CallbackQuery):
    """Handle forecast period selection"""
    days = int(callback.data.replace("forecast_", "").replace("_days", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    forecast = await finance_commands.calculate_profit_forecast(callback.from_user.id, days)
    
    if not forecast:
        await callback.message.edit_text(
            f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {days} –¥–Ω–µ–π*\n\n"
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã.",
            reply_markup=await finance_keyboards.get_finance_forecast_menu(),
            parse_mode="Markdown"
        )
    else:
        confidence = {
            "low": "–Ω–∏–∑–∫–∞—è",
            "medium": "—Å—Ä–µ–¥–Ω—è—è",
            "high": "–≤—ã—Å–æ–∫–∞—è"
        }
        
        message = f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {days} –¥–Ω–µ–π*\n\n"
        message += f"üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: *{forecast['estimated_income']} —Ä—É–±.*\n"
        message += f"üí∏ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: *{forecast['estimated_expenses']} —Ä—É–±.*\n"
        message += f"üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: *{forecast['estimated_profit']} —Ä—É–±.*\n\n"
        
        message += f"‚öñÔ∏è –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: *{confidence[forecast['confidence']]}*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        message += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        
        if forecast['estimated_profit'] > 0:
            message += "- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ\n"
            message += "- –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        else:
            message += "- –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            message += "- –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        
        message += "- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∞ \"–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —É—Å–ª—É–≥–∏\"\n"
        
        await callback.message.edit_text(
            message,
            reply_markup=await finance_keyboards.get_finance_forecast_menu(),
            parse_mode="Markdown"
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é "–°–æ–≤–µ—Ç—ã –ø–æ –±–∏–∑–Ω–µ—Å—É"
@router.callback_query(F.data == "finance_tips")
async def show_finance_tips(callback: types.CallbackQuery):
    """Show finance tips"""
    keyboard = await finance_keyboards.get_finance_tips_menu()
    
    await callback.message.edit_text(
        "üí° *–°–æ–≤–µ—Ç—ã –ø–æ –±–∏–∑–Ω–µ—Å—É*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–≤–µ—Ç–æ–≤:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("tip_"))
async def show_specific_tip(callback: types.CallbackQuery):
    """Show specific business tip"""
    tip_type = callback.data.replace("tip_", "")
    
    if tip_type == "increase_profit":
        message = "üöÄ *–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å*\n\n"
        message += "1Ô∏è‚É£ *–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ*\n"
        message += "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ\n"
        message += "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å–∫–∏–¥–æ–∫: —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã –¥–µ—à–µ–≤–ª–µ, –≤–µ—á–µ—Ä–Ω–∏–µ ‚Äî –¥–æ—Ä–æ–∂–µ\n"
        message += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –º–∞—Ä–∂–æ–π\n\n"
        
        message += "2Ô∏è‚É£ *–£–≤–µ–ª–∏—á—å—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Å—É–º–º—É —á–µ–∫–∞*\n"
        message += "‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤–æ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞\n"
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ø—Å–µ–ª–ª–∏–Ω–≥ (¬´–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —É–∫–ª–∞–¥–∫–∞ –ø—Ä–∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–∏¬ª)\n"
        message += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å –∫–µ—à–±—ç–∫–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ\n\n"
        
        message += "3Ô∏è‚É£ *–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å*\n"
        message += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n"
        message += "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–æ–≤\n"
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–µ—è–≤–æ–∫\n\n"
        
        message += "4Ô∏è‚É£ *–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –≤–∏–∑–∏—Ç–æ–≤*\n"
        message += "‚Ä¢ –í–Ω–µ–¥—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–µ—â–µ–Ω–∏–π\n"
        message += "‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –∞–∫—Ü–∏–∏ ¬´–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞¬ª —Å –±–æ–Ω—É—Å–∞–º–∏\n"
        message += "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"
        
    elif tip_type == "optimize_costs":
        message = "üíº *–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã*\n\n"
        message += "1Ô∏è‚É£ *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞*\n"
        message += "‚Ä¢ –ó–∞–∫—É–ø–∞–π—Ç–µ –æ–ø—Ç–æ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n"
        message += "‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ 1 –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
        message += "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏\n\n"
        
        message += "2Ô∏è‚É£ *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—Ä–µ–Ω–¥—ã*\n"
        message += "‚Ä¢ –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ\n"
        message += "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ç–æ–∫\n"
        message += "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –¥–ª—è –¥–µ–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã\n\n"
        
        message += "3Ô∏è‚É£ *–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏*\n"
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LED-–æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        message += "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–µ—Ä—ã –∏–ª–∏ –¥–∞—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤–µ—Ç–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä–æ–≤\n"
        message += "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞\n\n"
        
        message += "4Ô∏è‚É£ *–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã*\n"
        message += "‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤\n"
        message += "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Ç–∞–º, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ"
        
    elif tip_type == "retain_clients":
        message = "üë• *–ö–∞–∫ —É–¥–µ—Ä–∂–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n"
        message += "1Ô∏è‚É£ *–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è*\n"
        message += "‚Ä¢ –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥\n"
        message += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n"
        message += "‚Ä¢ –°–æ–±–∏—Ä–∞–π—Ç–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
        
        message += "2Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏*\n"
        message += "‚Ä¢ –í–Ω–µ–¥—Ä–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º\n"
        message += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ VIP-–ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Å–∞–º—ã—Ö —Ü–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        message += "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º\n\n"
        
        message += "3Ô∏è‚É£ *–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑–æ–π*\n"
        message += "‚Ä¢ –í–µ–¥–∏—Ç–µ —É—á–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        message += "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ –æ –∑–∞–ø–∏—Å–∏ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ —Å–∞–º–∏ –æ–± —ç—Ç–æ–º –ø–æ–¥—É–º–∞—é—Ç\n"
        message += "‚Ä¢ –ü–æ–∑–¥—Ä–∞–≤–ª—è–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏\n\n"
        
        message += "4Ô∏è‚É£ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤*\n"
        message += "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –ø–æ—á–µ–º—É –∫–ª–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ—Å—Ç–∞—é—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å\n"
        message += "‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª\n"
        message += "‚Ä¢ –°–æ–±–∏—Ä–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –æ—Ç —É—à–µ–¥—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"
        
    elif tip_type == "get_reviews":
        message = "üîÑ *–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤*\n\n"
        message += "1Ô∏è‚É£ *–ú–æ–º–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∞*\n"
        message += "‚Ä¢ –ü—Ä–æ—Å–∏—Ç–µ –æ—Ç–∑—ã–≤ –≤ –∫–æ–Ω—Ü–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã\n"
        message += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–µ–Ω—å –ø–æ—Å–ª–µ —É—Å–ª—É–≥–∏\n"
        message += "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞\n\n"
        
        message += "2Ô∏è‚É£ *–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤*\n"
        message += "‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Å–∫–∏–¥–∫—É –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤\n"
        message += "‚Ä¢ –£—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–≤–∏–≤—à–∏—Ö –æ—Ç–∑—ã–≤—ã\n"
        message += "‚Ä¢ –ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –ª–∏—á–Ω–æ –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤\n\n"
        
        message += "3Ô∏è‚É£ *–†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏*\n"
        message += "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π\n"
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞\n"
        message += "‚Ä¢ –†–∞–∑–º–µ—â–∞–π—Ç–µ –ª—É—á—à–∏–µ –æ—Ç–∑—ã–≤—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\n\n"
        
        message += "4Ô∏è‚É£ *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞*\n"
        message += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ QR-–∫–æ–¥—ã, –≤–µ–¥—É—â–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏\n"
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        message += "‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø—Ä–æ—Å—å–±–æ–π –æ–± –æ—Ç–∑—ã–≤–µ –∏ —Å—Å—ã–ª–∫–∞–º–∏/QR-–∫–æ–¥–∞–º–∏"
    
    else:
        message = "–°–æ–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    await callback.message.edit_text(
        message,
        reply_markup=await finance_keyboards.get_finance_tips_menu(),
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /finance
@router.message(Command("finance"))
async def finance_command(message: types.Message):
    """Finance command handler"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ admin)
    user = await user_commands.get_user(message.from_user.id)
    if not user or user.get("role", "") != "admin":
        await message.answer("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    keyboard = await finance_keyboards.get_finance_main_menu()
    await message.answer(
        "üìä *–§–∏–Ω–∞–Ω—Å—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. "
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å "
        "–ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == "start_finance_setup")
async def start_finance_setup(callback: types.CallbackQuery, state: FSMContext):
    """Start interactive finance setup"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(FinanceStates.setup_materials)
    
    await callback.message.edit_text(
        "üëã *–ë–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤*\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á—ë—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: *—Å–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —É –≤–∞—Å —É—Ö–æ–¥–∏—Ç –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏?*\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö)",
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
@router.message(StateFilter(FinanceStates.setup_materials))
async def process_setup_materials(message: types.Message, state: FSMContext):
    """Process setup materials answer"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∏—Å–ª–æ
        materials_cost = float(message.text.replace(',', '.'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await state.update_data(materials_cost=materials_cost)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.set_state(FinanceStates.setup_rent)
        
        await message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å—á–∏—Ç–∞–µ–º –∞—Ä–µ–Ω–¥—É.\n\n"
            "*–°–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –∑–∞ –∞—Ä–µ–Ω–¥—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Å—è—Ü?*\n"
            "(–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É)",
            parse_mode="Markdown"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: 200 –∏–ª–∏ 350.50")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∞—Ä–µ–Ω–¥–µ
@router.message(StateFilter(FinanceStates.setup_rent))
async def process_setup_rent(message: types.Message, state: FSMContext):
    """Process setup rent answer"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∏—Å–ª–æ
        rent_cost = float(message.text.replace(',', '.'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await state.update_data(rent_cost=rent_cost)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.set_state(FinanceStates.setup_salary)
        
        await message.answer(
            "‚úÖ –ü–æ–Ω—è–ª! –ê —Ç–µ–ø–µ—Ä—å –æ —Ñ–æ–Ω–¥–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã.\n\n"
            "*–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏ –≤—ã –æ—Ç–¥–∞–µ—Ç–µ –º–∞—Å—Ç–µ—Ä—É?*\n"
            "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50 - –µ—Å–ª–∏ –≤—ã –æ—Ç–¥–∞–µ—Ç–µ –º–∞—Å—Ç–µ—Ä—É –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏)",
            parse_mode="Markdown"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 20000")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
@router.message(StateFilter(FinanceStates.setup_salary))
async def process_setup_salary(message: types.Message, state: FSMContext):
    """Process setup salary answer"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∏—Å–ª–æ
        salary_percent = float(message.text.replace(',', '.'))
        
        if salary_percent < 0 or salary_percent > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await state.update_data(salary_percent=salary_percent)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.set_state(FinanceStates.setup_other)
        
        await message.answer(
            "‚úÖ –•–æ—Ä–æ—à–æ! –û—Å—Ç–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö.\n\n"
            "*–ö–∞–∫–∏–µ –µ—â–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —É –≤–∞—Å –µ—Å—Ç—å?*\n"
            "(–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö - –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —Ä–µ–∫–ª–∞–º–∞ –∏ —Ç.–¥.)",
            parse_mode="Markdown"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 60")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö
@router.message(StateFilter(FinanceStates.setup_other))
async def process_setup_other(message: types.Message, state: FSMContext):
    """Process setup other costs answer"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∏—Å–ª–æ
        other_costs = float(message.text.replace(',', '.'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        await state.update_data(other_costs=other_costs)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        materials_cost = data.get("materials_cost", 0)
        rent_cost = data.get("rent_cost", 0)
        salary_percent = data.get("salary_percent", 0)
        other_costs = data.get("other_costs", 0)
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ 1500 —Ä—É–±.
        avg_service_price = 1500
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–¥–Ω—É —É—Å–ª—É–≥—É
        avg_service_cost = materials_cost + (rent_cost / 22 / 8)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 22 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è, 8 —É—Å–ª—É–≥ –≤ –¥–µ–Ω—å
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –º–∞—Å—Ç–µ—Ä–∞
        salary_cost = avg_service_price * (salary_percent / 100)
        avg_service_cost += salary_cost
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        other_per_service = other_costs / 22 / 8  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 22 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è, 8 —É—Å–ª—É–≥ –≤ –¥–µ–Ω—å
        avg_service_cost += other_per_service
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –∏ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        profit = avg_service_price - avg_service_cost
        margin = (profit / avg_service_price) * 100
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = "üìä *–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π*\n\n"
        message_text += f"–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Ç –≤–∞—à–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n\n"
        message_text += f"üî∏ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {avg_service_price} —Ä—É–±.\n"
        message_text += f"üî∏ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {materials_cost} —Ä—É–±.\n"
        message_text += f"üî∏ –ó–∞—Ä–ø–ª–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞: {salary_cost} —Ä—É–±. ({salary_percent}%)\n"
        message_text += f"üî∏ –î–æ–ª—è –∞—Ä–µ–Ω–¥—ã –Ω–∞ —É—Å–ª—É–≥—É: {round(rent_cost / 22 / 8, 2)} —Ä—É–±.\n"
        message_text += f"üî∏ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —É—Å–ª—É–≥—É: {round(other_per_service, 2)} —Ä—É–±.\n\n"
        
        message_text += f"üí∞ *–ü—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏: {round(profit, 2)} —Ä—É–±.*\n"
        message_text += f"üìà *–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {round(margin, 2)}%*\n\n"
        
        # –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        message_text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        
        if margin < 20:
            message_text += "‚ùó –í–∞—à–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
            message_text += "- –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏ –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—ã\n"
            message_text += "- –ò—Å–∫–∞—Ç—å –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            message_text += "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
        elif margin < 40:
            message_text += "‚ö†Ô∏è –í–∞—à–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã, –Ω–æ –µ—ë –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:\n"
            message_text += "- –î–æ–±–∞–≤—å—Ç–µ —É—Å–ª—É–≥–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n"
            message_text += "- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª—É–≥\n"
            message_text += "- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–∫—É–ø–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
        else:
            message_text += "‚úÖ –í–∞—à–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            message_text += "- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ –±–∏–∑–Ω–µ—Å –∏ –ø—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            message_text += "- –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
            message_text += "- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ø–µ–∫—Ç—Ä–∞ —É—Å–ª—É–≥\n"
        
        message_text += "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–§–∏–Ω–∞–Ω—Å—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º–µ–Ω—é
        await message.answer(
            message_text,
            parse_mode="Markdown",
            reply_markup=await finance_keyboards.get_finance_main_menu()
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 7500")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
async def send_weekly_expense_reminder(bot):
    """Send weekly expense reminder to admins"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await user_commands.get_all_users()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = [user for user in users if user.get("role", "") == "admin"]
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        now = datetime.datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6 - —ç—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ Python)
        if now.weekday() == 6:
            for admin in admins:
                try:
                    admin_id = admin["user_id"]
                    
                    await bot.send_message(
                        admin_id,
                        "üìù *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n"
                        "–ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é. "
                        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç –∏ –ø–æ–ª—É—á–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
                        "–•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
                        parse_mode="Markdown",
                        reply_markup=await finance_keyboards.get_finance_main_menu()
                    )
                except Exception as e:
                    logging.error(f"Error sending reminder to admin {admin.get('user_id')}: {str(e)}")
    except Exception as e:
        logging.error(f"Error in send_weekly_expense_reminder: {str(e)}")
